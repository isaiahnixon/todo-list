{"version":3,"sources":["AddTask.js","Task.js","TaskList.js","App.js","registerServiceWorker.js","index.js"],"names":["AddTask","props","state","header","button","description","handleUpdate","bind","addTask","event","this","setState","target","value","className","type","onChange","onClick","Component","Task","progress","borderColor","updateProgress","removeTask","key","draggableId","provided","snapshot","ref","innerRef","style","draggableStyle","isDragging","userSelect","padding","grid","margin","border","borderRadius","textAlign","background","color","dragHandleProps","placeholder","getListStyle","TaskList","tasks","message","onDragEnd","newDescription","includes","result","destination","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","removeDescription","filteredTasks","filter","map","droppableId","renderTasks","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e2b7492a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './AddTask.css';\n\n/**\n * This class renders the AddTask block that handles user input to render more Tasks.\n */\nclass AddTask extends Component {\n  /**\n   * This function is called upon instantiation of the class.\n   *\n   * @param props\n   */\n  constructor(props) {\n    // Call the parent constructor.\n    super(props);\n    // Define the default state.\n    this.state = {\n      header: 'New Task',\n      button: 'Add',\n      description: ''\n    };\n    // Bind \"this\" calls in handleUpdate() and addTask() to this instantiation of the class.\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.addTask = this.addTask.bind(this);\n  }\n\n  /**\n   * Updates the description based upon the user input.\n   *\n   * @param event\n   * The automatically inherited event attributes.\n   */\n  handleUpdate(event) {\n    // Set the description to the value of the target of the event.\n    this.setState({ description: event.target.value });\n  }\n\n  /**\n   * Passes the current description to the addTask() function defined as a\n   * property when the class is instantiated.\n   */\n  addTask() {\n    this.props.addTask(this.state.description);\n  }\n  /**\n   * @returns {JSX}\n   * The markup for React to process into the front-end display.\n   */\n  render() {\n    return (\n      <div className=\"AddTask\">\n        {/* Render the header. */}\n        <h2>{this.state.header}:</h2>\n        {/* Render a text input for the user to manipulate the description. */}\n        <input\n          className=\"task_text_input\"\n          type=\"text\"\n          onChange={this.handleUpdate}\n          value={this.state.description}\n        />\n        <br />\n        {/* Render a button that calls addTask(). */}\n        <button className=\"add_task_button\" onClick={this.addTask}>\n          {this.state.button}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default AddTask;\n","import React, { Component } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst grid = 8;\n\n/**\n * Renders the appropriate styling for the Task.\n\n * @param draggableStyle\n * @param isDragging\n * @param borderColor\n */\nconst getTaskStyle = (draggableStyle, isDragging, borderColor) => ({\n  // Outline the form of the Task, using the grid constant.\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  border: '0.25em solid',\n  borderRadius: '1em',\n  textAlign: 'left',\n\n  // Change the borderColor based upon the input parameter.\n  borderColor,\n\n  // Change background color and text color if dragging.\n  background: isDragging ? borderColor : '#4b3832',\n  color: isDragging ? '#4b3832' : borderColor,\n\n  // Apply inherited style.\n  ...draggableStyle\n});\n\n/**\n * This class renders a task and stores its local state variables.\n */\nclass Task extends Component {\n  /**\n   * This function is called upon instantiation of the class.\n   *\n   * @param props\n   */\n  constructor(props) {\n    // Call the parent constructor.\n    super(props);\n    // Define the default state.\n    this.state = {\n      progress: 'Not started',\n      borderColor: '#ffe7c8'\n    };\n    // Bind \"this\" calls in updateProgress() to this instantiation of the class.\n    this.updateProgress = this.updateProgress.bind(this);\n  }\n\n  /**\n   * This function tests the current progress and then moves it one step forward along the workflow.\n   */\n  updateProgress() {\n    if (this.state.progress === 'Not started') {\n      this.setState({ progress: 'In progress' });\n      this.setState({ borderColor: '#e8caff' });\n    } else if (this.state.progress === 'In progress') {\n      this.setState({ progress: 'Completed' });\n      this.setState({ borderColor: '#d7fdec' });\n    } else if (this.state.progress === 'Completed') {\n      // This is a call to removeTask(), which is a property defined when the class is instantiated.\n      this.props.removeTask(this.props.description);\n    }\n  }\n\n  /**\n   * @returns {JSX}\n   * The markup for React to process into the front-end display.\n   */\n  render() {\n    return (\n      <Draggable\n        key={this.props.description}\n        draggableId={this.props.description}\n      >\n        {(provided, snapshot) => (\n          // Call updateProgress() when the Task is clicked.\n          <div onClick={this.updateProgress}>\n            <div\n              ref={provided.innerRef}\n              style={getTaskStyle(\n                provided.draggableStyle,\n                snapshot.isDragging,\n                this.state.borderColor\n              )}\n              {...provided.dragHandleProps}\n            >\n              <div>\n                {/* Render the current progress and description. */}\n                <strong>{this.state.progress}:</strong> {this.props.description}\n              </div>\n            </div>\n            {provided.placeholder}\n          </div>\n        )}\n      </Draggable>\n    );\n  }\n}\n\nexport default Task;\n","import React, { Component } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport './TaskList.css';\nimport AddTask from './AddTask';\nimport Task from './Task';\n\n/**\n * A reorder function to support drag and drop functionality.\n * @param list\n * @param startIndex\n * @param endIndex\n * @returns {Array}\n */\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\n// Define the grid and render the padding based upon it.\nconst grid = 8;\nconst getListStyle = { padding: grid };\n\n/**\n * This class pieces together the application and stores the array of the tasks.\n */\nclass TaskList extends Component {\n  /**\n   * This function is called upon instantiation of the class.\n   *\n   * @param props\n   */\n  constructor(props) {\n    // Call the parent constructor.\n    super(props);\n    // Define the default state.\n    this.state = {\n      header: 'To-do List',\n      tasks: [\n        'Write the tests for this application',\n        'Add an exportable archive of completed tasks'\n      ],\n      message:\n        'Click on a task to progress it through the workflow:\\n' +\n        'Not started -> In progress -> Completed\\n' +\n        'Click again to delete the task\\n'\n    };\n    // Bind \"this\" calls in addTask() and removeTask() and onDragEnd()\n    // to this instantiation of the class.\n    this.addTask = this.addTask.bind(this);\n    this.removeTask = this.removeTask.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  /**\n   * Adds a new Task instantiation to the TaskList.\n   *\n   * @param newDescription\n   * (string) The description of the Task to be added.\n   */\n  addTask(newDescription) {\n    // Test if the description is empty.\n    if (newDescription !== '') {\n      // Test if the task does not already exist.\n      if (!this.state.tasks.includes(newDescription)) {\n        // Add the task and clear the message.\n        this.setState({ tasks: [...this.state.tasks, newDescription] });\n        this.setState({ message: '' });\n      } else {\n        // Inform the user the task is a duplicate.\n        this.setState({ message: 'You already have a task for that' });\n      }\n    } else {\n      // Inform the user that input is required.\n      this.setState({ message: 'Input field cannot be empty' });\n    }\n  }\n\n  /**\n   * Processes what to do when an item is dropped.\n   * @param result\n   */\n  onDragEnd(result) {\n    // Test if the item was dropped outside the list.\n    if (!result.destination) {\n      // Do not change its position, and end the function.\n      return;\n    }\n\n    // Reorder the list based upon the position of the item.\n    const tasks = reorder(\n      this.state.tasks,\n      result.source.index,\n      result.destination.index\n    );\n\n    // Reset the list of Tasks.\n    this.setState({\n      tasks\n    });\n  }\n\n  /**\n   * Removes a Task from the TaskList.\n   *\n   * @param removeDescription\n   * (string) The description of the Task to be removed.\n   */\n  removeTask(removeDescription) {\n    // An array of all Tasks where their description is not removeDescription.\n    const filteredTasks = this.state.tasks.filter(\n      description => description !== removeDescription\n    );\n\n    // Reset the TaskList with the filteredTasks.\n    this.setState({ tasks: filteredTasks });\n  }\n\n  /**\n   * @returns {Array}\n   * The raw JSX of the Tasks to be rendered.\n   */\n  renderTasks() {\n    return this.state.tasks.map(description => (\n      <Task\n        key={description}\n        description={description}\n        removeTask={this.removeTask}\n      />\n    ));\n  }\n\n  /**\n   * @returns {JSX}\n   * The markup for React to process into the front-end display.\n   */\n  render() {\n    return (\n      <div className=\"TaskList\">\n        {/* Render the current header. */}\n        <div className=\"task_list_header\">\n          <h1>{this.state.header}</h1>\n        </div>\n        {/* Instantiate an AddTask, passing it the addTask function from this class. */}\n        <AddTask addTask={this.addTask} />\n        {/* Render the current user message. */}\n        <div className=\"task_list_message\">\n          <h3>{this.state.message}</h3>\n        </div>\n        {/* Render the drag and drop list of Tasks */}\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <div ref={provided.innerRef} style={getListStyle}>\n                {this.renderTasks()}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nexport default TaskList;\n","/**\n * This is the master JS file which renders the application.\n *\n * Right now, it basically just renders a TaskList.\n */\n\nimport React from 'react';\nimport './App.css';\nimport TaskList from './TaskList';\n\nconst App = () => (\n  <div className=\"App\">\n    <TaskList />\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Automatically generated file.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}